[build-system]
# Documentation: https://packaging.python.org/en/latest/specifications/build-backend/
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
# Documentation: https://packaging.python.org/en/latest/specifications/core-metadata/
name = "moneybin"
version = "0.1.0"
description = "A personal financial data aggregation and analysis tool built on DuckDB"
requires-python = ">=3.11"
dependencies = [
    # Core orchestration and data processing
    "dagster>=1.11.7",
    "dagster-webserver>=1.11.7",
    "dagster-duckdb>=0.27.7",
    "dagster-dbt>=0.27.9",
    "dbt-core>=1.10.8",
    "dbt-duckdb>=1.9.4",
    # Database and data manipulation
    "duckdb>=1.3.2",
    "polars>=1.32.3", # More performant alternative to pandas when needed
    # PDF processing and OCR (primary tool only)
    "pdfplumber>=0.11.7",
    "pillow>=11.3.0",
    # API integrations
    "plaid-python>=36.0.0",
    "requests>=2.32.5",
    "python-dotenv>=1.1.1",
    # Data validation and utilities
    "pydantic>=2.11.7",
    "python-dateutil>=2.9.0.post0",
    # Modern CLI framework
    "typer>=0.15.0",
    # Jupyter notebooks
    "jupyter>=1.1.1",
    "ipykernel>=6.30.1",
    "matplotlib>=3.10.5",
    "seaborn>=0.13.2",
]

[tool.setuptools]
# Configure src/ layout for proper package discovery
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
# Find packages in src/ directory
where = ["src"]

[project.scripts]
# Unified CLI entry point using Typer
moneybin = "moneybin.cli.main:main"

[project.optional-dependencies]
# Documentation: https://packaging.python.org/en/latest/specifications/core-metadata/#optional-dependencies
dev = [
    # Code quality and formatting
    "ruff>=0.12.10",
    "pyright>=1.1.404",
    "pre-commit>=4.3.0",
    "sqlparse>=0.5.0",  # SQL parsing and basic formatting
    # Testing framework and tools
    "pytest>=8.4.1",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
]

docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.18",
    "mkdocstrings[python]>=0.30.0",
]

[tool.ruff]
# Documentation: https://docs.astral.sh/ruff/configuration/
target-version = "py311"
line-length = 88
preview = true

[tool.ruff.lint]
# Documentation: https://docs.astral.sh/ruff/rules/
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "N",   # pep8-naming
    "D",   # pydocstring
    "S",   # flake8-bandit (security)
    "T20", # flake8-print
]
ignore = [
    "E501",  # line too long, handled by line-length
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.format]
# Documentation: https://docs.astral.sh/ruff/formatter/
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"
# insert-final-newline = true  # This is not a valid Ruff formatter option

[tool.pyright]
# Documentation: https://microsoft.github.io/pyright/#/configuration
# High-quality configuration balancing rigor with pragmatism
pythonVersion = "3.12"
venvPath = "."
venv = ".venv"
include = ["src", "tests", "pipelines"]
typeCheckingMode = "strict"
useLibraryCodeForTypes = true
reportMissingImports = true
reportMissingTypeStubs = false

# Unused code detection
reportUnusedImport = true
reportUnusedVariable = true
reportUnusedClass = true
reportUnusedFunction = true
reportDuplicateImport = true

# Optional type handling - critical for financial data
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true

# Untyped code detection - ensures type safety
reportUntypedFunctionDecorator = false  # Disabled for Dagster compatibility
reportUntypedClassDecorator = true
reportUntypedBaseClass = true
reportUntypedNamedTuple = true

# Privacy and constants - important for financial apps
reportPrivateUsage = true
reportConstantRedefinition = true

# Method overrides - ensures inheritance correctness
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true

# Type completeness - core rigor
reportMissingParameterType = true
reportMissingTypeArgument = true

# String safety - prevents runtime errors
reportInvalidStringEscapeSequence = true

# Unknown types - catches type inference failures
reportUnknownParameterType = true
reportUnknownArgumentType = true
reportUnknownLambdaType = true
reportUnknownVariableType = false  # Disabled for Dagster compatibility
reportUnknownMemberType = true

# Additional rigor for financial applications (conservative selection)
reportInconsistentConstructor = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnusedExpression = true

[tool.pytest.ini_options]
# Documentation: https://docs.pytest.org/en/stable/reference/reference.html#configuration-options
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
# Documentation: https://coverage.readthedocs.io/en/7.4.0/config.html#run-section
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/venv/*",
    "*/__pycache__/*",
]

[tool.coverage.report]
# Documentation: https://coverage.readthedocs.io/en/latest/config.html#report-section
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


[dependency-groups]
dev = [
    "sqlparse>=0.5.3",
]
